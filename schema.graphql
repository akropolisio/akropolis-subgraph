###############
### STAKING ###
###############

type StakingPool @entity {
  "address"
  id: ID!
  depositToken: Token!
  usersCount: Int!

  users: [User!]! @derivedFrom(field: "stakingPools")
}

###############
### SAVINGS ###
###############

type SavingsPool @entity {
  "address"
  id: ID!
  lpToken: SPoolToken!
  depositTokens: [Token!]!
  rewardTokens: [Token!]!
  apr: SPoolApr!
  prevBalance: SPoolBalance!
  balance: SPoolBalance!
  lastRewardDistributionDate: BigInt!
  prevRewardDistributionDate: BigInt!
  createdAt: BigInt!

  rewards: [SReward!]! @derivedFrom(field: "pool")
  aprHistory: [SPoolApr!]! @derivedFrom(field: "pool")
  balanceHistory: [SPoolBalance!]! @derivedFrom(field: "pool")
  users: [User!]! @derivedFrom(field: "savingsPools")
  distributions: [SPoolYieldDistribution!]! @derivedFrom(field: "pool")
}

type SReward @entity {
  id: ID!
  pool: SavingsPool!
  duration: BigInt!
  poolBalance: SPoolBalance!
  token: Token!
  amount: BigInt!
  date: BigInt!
}

type SPoolApr @entity {
  id: ID!
  amount: BigInt!
  date: BigInt!
  duration: BigInt!
  pool: SavingsPool!
  txHash: Bytes!
}

type SPoolBalance @entity {
  id: ID!
  amount: BigInt!
  date: BigInt!
  pool: SavingsPool!
}

type SPoolYieldDistribution @entity {
  id: ID!
  pool: SavingsPool!
  amount: BigInt!
}

type SPoolToken @entity {
  "address"
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  savingsPool: SavingsPool!
}

##############
### VAULTS ###
##############

type Vault @entity {
  "address"
  id: ID!
  module: VaultModule!
  isActive: Boolean!
  lpToken: Token!
  depositToken: Token!
  totalTVL: BigInt!
  createdAt: BigInt!

  users: [User!]! @derivedFrom(field: "vaults")
}

type BasisVault @entity {
  "address"
  id: ID!
  isActive: Boolean!

  users: [User!]! @derivedFrom(field: "basisVaults")
}

############
### USER ###
############

type User @entity {
  "address"
  id: ID!
  active: Boolean!

  savingsPools: [SavingsPool!]!
  stakingPools: [StakingPool!]!
  vaults: [Vault!]!
  basisVaults: [BasisVault!]!

  depositedBalances: [DepositedBalance!]! @derivedFrom(field: "user")
}

type DepositedBalance @entity {
  "user address + pool address"
  id: ID!
  value: BigInt!
  user: User!
  pool: Bytes!
  "savings | staking | ethVaultsV1 | ethVaultsV2 | bscVaultsV2"
  module: Module!
}

#############
### OTHER ###
#############

enum VaultModule {
  ethVaultsV1
  ethVaultsV2
  bscVaultsV2
}

enum Module {
  savings
  staking
  ethVaultsV1
  ethVaultsV2
  bscVaultsV2
}

type Token @entity {
  "address"
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

type GlobalStat @entity {
  id: ID!
  activeMembersCount: Int!
  totalYieldEarned: BigInt!
}

type SubgraphConfig @entity {
  id: ID!
  aprDecimals: Int!
}

enum SingleEntityID {
  ID
}
